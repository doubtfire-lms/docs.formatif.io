{"pageProps":{"id":"overview","audience":"developer","markdown":"\n# Introduction\n\n## What is Doubtfire\n\nDoubtfire is a modern, lightweight learning management system.\n\nCentral to this approach is use for frequent formative feedback to help each student develop a portfolio of work to\ndemonstrate they have achieved unit learning outcomes. This approach aims to provide greater opportunities for students\nto be more goal-oriented and self-regulated.\n\nDoubtfire, has been used by both staff and students as a platform to support such frequent formative feedback in\nassisting students to construct their knowledge.\n\nDoubtfire aims to help support students set learning goals and work toward achieving these, thereby helping support the\ndevelopment of self-regulation. To better support these features, we have enhanced Doubtfire with open learner model\nvisualisations to provide better support for indicating the links among these tasks and the unit’s learning outcomes as\nwell as expected outcomes.\n\n## What does it do\n\nDoubtfire allows staff and student to explore the links between tasks and learning outcomes, enabling staff to monitor\nstudent progress toward achievement of learning outcomes, and supporting students in better manage their learning\nprogress.\n\nIt provides a platform for online learning, by giving tutors the means to allocate tasks to students and assess them,\nand giving students a portal to complete and submit tasks, set a grade goal, track their progress via Burndown chart,\nand submitting a final portfolio. The portfolio is automatically generated into pdf book form by collation of the\nstudents weekly tasks.\n\nTeachers are allowed to give feedback to students, so that students can revise their submission and re-submit. Students\ncan request time extensions if they are running behind schedule on a particular task.\n\nA link to using some of the basic features for **staff** can be found [here](/guides#staff).\n\nA link to using some of the basic features for **students** can be found [here](/guides#student).\n\n## Learning and Assessment\n\nThe learning outcomes guide all other activities, and are therefore defined at the start of the unit design. The aim of\nthis process is to define what all students need to demonstrate in order to pass the unit, so these outcomes need to be\nclearly expressed in a language that students can engage with. Once outcomes are set, assessment criteria need to be\ndefined to indicate how students can demonstrate these outcomes to different grade standards. Student activity is then\ndirected by defining a range of tasks designed to help students achieve the unit learning outcomes to each of the grade\nstandards.\n\nThe method of unit delivery is changed to be student-centered, where students can aim to achieve a given grade by\nworking through the related tasks. During unit delivery, students work on tasks and submit this work for formative\nfeedback with flexible deadlines to help students achieve the tasks to the required standard. In this model, staff\nassess student work to provide formative feedback aimed at helping the student improve their work and address any\nmisconceptions. Where the task is of a good standard it is signed off by staff as being Complete, otherwise students are\nasked to fix and resubmit the work. This helps ensure that students take notice of formative feedback, and that this\nfeedback is then acted upon to help inform student learning.\n\nAt the end of the teaching period, students use the work they have completed though the unit’s tasks to create a\nportfolio. Student portfolios are then assessed in order to determine final student grades. The assessment process uses\nthe unit’s assessment criteria and unit learning outcomes to determine results. This process can then be informed by the\nstatus of each student’s tasks, with the assessor knowing that those that are marked as complete and have been assessed\nby staff as demonstrating the required knowledge.\n\n## Burndown charts - An Agile approach\n\nA key principle of Agile software development methods is that they embrace change by allowing for adaptive, periodic\nadjustment of activities, resulting in robust and effective outcomes.\n\nA key driver of Agile development is the use of Burn down charts—a central requirement for the Doubtfire tool.\n\nDoubtfire allows teaching staff to outline the tasks students need to complete during the semester. Student are then\nable to monitor their progress against these tasks using burn down charts. The charts show the backlog of work remaining\nweek by week, which decreases as work is completed.\n\nThese charts give students a visual way to know how many tasks they need to complete over the semester, and estimate the\nrelative complexity of those tasks—a skill which many seem to lack. Students should also be able to use the tool to\ndetermine whether they need to increase their rate of progress (velocity) and, if so, commit more time to the subject or\ntake greater advantage of resources available to them. In addition to the simple scrum-style marking of tasks as\ncompleted, it was also seen that students could use the system to indicate if they were working on, or having trouble\nwith, particular tasks. To account for task heterogeneity, staff need to be able to weight tasks, based on predicted\nsize and complexity. A students projected completion should be recalculated as tasks and weeks progress.\n\n## Who developed it\n\nThe main contributors of Doubtfire are Andrew Cain ([@macite](https://github.com/macite)), Alex Cummaudo\n([@alexcu](https://github.com/alexcu)) and Jake Renzella ([@jakerenzella](https://github.com/jakerenzella))\n\n---\n\n# Framework - High Level Structure\n\n## Doubtfire Web\n\nDoubtfire Web is the front end (client side) and is written in Javascript, using [AngularJS](http://angularjs.org) and\n[Bootstrap](http://getbootstrap.com).\n\n## Doubtfire API\n\nDoubtfire API is the backend (server side) and uses the [Ruby on Rails framework](https://rubyonrails.org).\n\n![High Level Structure of Doubtfire](/guides/overview/high-level-structure.gif)\n\nGrape API is a Restful API. Access to the API via http verbs:\n\n- `GET` - read data\n- `PUT` - change data\n- `POST` - create data\n- `DELETE` - delete data\n\nFirstly we need to start the Rails server by navigating to the `doubtfire-api` folder and running:\n\n```shell\nbundle exec rails s\n```\n\n![Starting the Rails server](/guides/overview/start-rails-server.png)\n\nOnce you have Rail server running, navigate to `localhost:3000/api/docs/`, it gives us access to the API endpoints.\n\n![Doubtfire API documentation](/guides/overview/api-documentation.png)\n\nFor example, clicking on \"users\" shows endpoints such as `GET /api/users`, `POST /api/users`, etc,\n\n![Users API](/guides/overview/users-api.jpg)\n\nThe corresponding code can be found in the `users_api.rb` file,\n\n![users_api.rb file](/guides/overview/users-api-ruby.jpg)\n\nYou can then fully interact with the API.\n\n### Getting the list of users in the database\n\nFirst off, let's log in, and view the existing list of users in the database.\n\nIf we click on \"Users\" in the API documentation, it looks like this:\n\n![Users](/guides/overview/users-api.jpg)\n\nWe then want to click on `GET /api/users` (Get the list of users), which looks like this:\n\n![Get the list of users](/guides/overview/get-users-endpoint.png)\n\nHowever, we need an authentication code to do this or any action, i.e. we need to be logged in as a user. To do this,\nclick on \"auth\":\n\n![Auth API](/guides/overview/auth-api.png)\n\nThen click on `POST /api/auth` to sign in, using:\n\n```\nusername: aadmin\npassword: password\n```\n\n![Signing in](/guides/overview/auth-endpoint.jpg)\n\nClick on \"Try it out\", then scroll down and copy the **auth_token**:\n\n![Auth token](/guides/overview/auth-token.jpg)\n\nWe can then go back to \"Users\", and use this \"auth_token\" to get the list of users.\n\n![Using auth_token to access API endpoints as a logged in user](/guides/overview/authenticated-api-request.jpg)\n\nNow, if we \"Try it out\", this time we will get the list of users from the database. Make sure to scroll down to see the\nfull list.\n\n![\"Getting\" the list of users from the database](/guides/overview/get-users-response.jpg)\n\n### Creating a user\n\nNext, lets say we want to create a new user into the database.\n\nWe should go to Users in the API, select `POST /api/users`, and populate the values for the new user. Also we should add\nthe same auth_token we used when signing in, as below:\n\n![Creating a new user](/guides/overview/post-users-endpoint.jpg)\n\nAfter clicking \"Try it out\", the Response Body should show the database update as below:\n\n![New user added](/guides/overview/post-users-response.png)\n\nFinally to see the newly created user in the list of users, we can go back to \"Users\" in the API and use the function\n\"GET - Get the list of users\" again.\n\nThis time, if we scroll down to the body, we should see our newly created user.\n\n![Newly created user found at the bottom of the List of Users](/guides/overview/post-users-response-result.jpg)\n\nSimilarly, we can interact with different sections of the API, and get feedback from the database.\n\n---\n\n# Technologies Used\n\n## Javascript - Angular Framework (front end)\n\nAngular JS is a JavaScript based Open source front end web framework, maintained by Google and by a group of individuals\nand corporations to address many of the challenges faced in developing a single page application with components\ncommonly used in Internet applications. In our case it’s OnTrack. Aim of angular JS is to simplify both testing and\ndeveloping by providing a framework for client side with MVC ( Model View Controller ) and MVVM ( Model View viewmodel\n).\n\n### What does angular JS DO?\n\nThe AngularJS framework works by first reading the Hypertext Markup Language (HTML) page, which has an additional custom\nHTML attributes embedded into it. Angular interprets those attributes as directives to bind input or output parts of the\npage to a model that is represented by standard JavaScript variables. The values of those JavaScript variables can be\nmanually set within the code, or retrieved from static or dynamic JSON resources.\n\n### Aim of Angular JS’s design\n\n- to decouple DOM manipulation from application logic. The difficulty of this is dramatically affected by the way the\n  code is structured.\n\n- to decouple the client side of an application from the server-side. This allows development work to progress in\n  parallel and allows for reuse of both sides.\n\n- to provide structure for the journey of building an application: from designing the UI, through writing the business\n  logic, to testing.\n\n## Ruby On Rails (back end)\n\nRails is a development tool which gives web developers a framework, providing structure for all the code they write. The\nRails framework helps developers to build websites and applications, because it abstracts and simplifies common\nrepetitive tasks. Rails is written in Ruby, the programming language which is also used alongside Rails. Ruby is to\nRails as PHP is to Symfony and Zend, or as Python is to Django. Ruby on Rails development is convention over\nconfiguration. This means that the programmer does not have to spend a lot of time configuring files in order to get\nsetup, Rails comes with a set of conventions which help speed up development. **Rails is the emphasis on RESTful\napplication design.** REST (Representational State Transfer) is a style of software architecture based around the\nclient-server relationship. It encourages a logical structure within applications, which means they can easily be\nexposed as an API (Application Programming Interface).\n\n### Why are we using Ruby On Rails?\n\n1. The process of programming is much faster than with other frameworks and languages, partly because of the\n   object-oriented nature of Ruby and the vast collection of open source code available within the Rails community.\n\n2. The Rails conventions also make it easy for developers to move between different Rails projects, as each project will\n   tend to follow the same structure and coding practices.\n\n3. Rails is good for rapid application development (RAD), as the framework makes it easy to accommodate changes.\n\n4. Ruby code is very readable and mostly self-documenting. This increases productivity, as there is less need to write\n   out separate documentation, making it easier for other developers to pick up existing projects.\n\n5. Rails has developed a strong focus on testing and has good testing frameworks.\n\n6. Rails and most of its libraries are open source, so unlike other commercial development frameworks there are no\n   licensing costs involved.\n\n## GitHub\n\nGithub is a Git repository hosting service, but it adds many of its own features. While Git is a command line tool,\nGitHub provides a Web-based graphical interface. It also provides access control and several collaboration features,\nsuch as a wikis and basic task management tools for every project.\n\n### How it works?\n\nGitHub is a code hosting platform for version control and collaboration. It lets you and others work together on\nprojects from anywhere. You'll create your own repository and learn GitHub's Pull Request workflow, a popular way to\ncreate and review code\n\n### What is a pull request?\n\nA pull request (PR) is a method of submitting contributions to an open development project. It occurs when a developer\nasks for changes committed to an external repository to be considered for inclusion in a project's main repository after\nthe peer review.\n\n### Why to use Github?\n\nIt includes access controls as well as a number of collaboration features like tools for basic task management and for\nall projects you handle. GitHub hosts your source code projects in a variety of different programming languages and\nkeeps track of the various changes made to every iteration.\n\n## Restful API\n\n## MVC model (Model-View-Controller)\n\nIt’s a Software design pattern Commonly used for developing user Interfaces which divides the related program logic into\nthree interconnected elements, This is done to separate internal representations of information from the ways\ninformation is presented to and accepted from the user. This patten us used for designing the layout of the web page.\nPopular programing languages like Java, Python, Ruby, PHP etc have MVC frameworks used for web and mobile application\ndevelopment.\n\n![The MVC Model](/guides/overview/mvc.png)\n\n### Why use MVC model\n\n1. Multiple developers can work simultaneously on the model, controller and views.\n\n2. MVC enables logical grouping of related actions on a controller together. The views for specific model are also\n   grouped together.\n\n3. The very nature of the MVC framework is such that there is low coupling among models, views or controllers\n\n4. Because of the separation of responsibilities, future development or modification is easier.\n\n5. Models can have multiple views\n\n## Active Record\n\nguides.rubyonrails.org -> Models -> Active Record Basics https://guides.rubyonrails.org/active_record_basics.html\n\n## Facade Design pattern (front end of Doubtfire)\n\nThe facade pattern is a software-design pattern commonly used in object-oriented programming. Analogous to a facade in\narchitecture, a facade is an object that serves as a front-facing interface masking more complex underlying or\nstructural code.\n\nA facade can improve the readability and usability of a software library by masking interaction with more complex\ncomponents behind a single (and often simplified) API.\n\nIn other words, **a simplified API (facade) with required user functions are provided to the user.** The user can then\naccess the required functionality through the API's methods, without needing to understand the underlying complexities\nof the system.\n\n![The Facade design pattern](/guides/overview/facade.png)\n\n### When to use Facade pattern\n\nDevelopers often use the facade design pattern when a system is very complex or difficult to understand because the\nsystem may have many interdependent classes. **This pattern hides the complexities of the larger system and provides a\nsimpler interface to the client.**\n\n---\n\n# Installing the Development Environment\n\n---\n\n# Code Exploration\n\n## Doubtfire-API\n\n### Database and Object model mapping\n\nThe database is found in `app/db/schema.rb`. It shows the current version of the database, which consists of the various\ncreate_table statements to create the database structure. Schema.rb tells us the different tables in the database and\nthe values they contain.\n\n![Schema.rb](/guides/overview/schema-ruby.jpg)\n\nDoubtfire uses the Object model, where all the objects are found in `app/models` folder. We can then map the \"projects\"\ntable in schema.rb, to the project.rb object in the `app/models` folder. Whereas the \"projects\" table contains the\ndefinition of the attributes of the object, the project.rb object contains the functionality.\n\n![Mapping of Projects Table (left) with Project Object (right)](/guides/overview/project-schema-to-object-mapping.jpg)\n\nDoubtfire utilizes the migrations feature of Active Record to incrementally modify the database, and then regenerate the\nschema definition.\n\nTo look into this further, one should look at the various tables in **schema.rb** and their corresponding mappings with\ntheir Object classes and class functions in the `app/models` folder.\n\n## Doubtfire-Web\n\n---\n\n# UML Class Diagrams\n\n---\n\n# Contributing\n\n---\n\n# Useful References\n\n---\n","title":"Overview of Doubtfire","summary":"This document provides an overview of Doubtfire","authors":["Justfeedme"],"html":"<h2 id=\"introduction\">Introduction<a href=\"#introduction\" aria-hidden=\"true\" tabindex=\"-1\"><span> §</span></a></h2><h3 id=\"what-is-doubtfire\">What is Doubtfire<a href=\"#what-is-doubtfire\" aria-hidden=\"true\" tabindex=\"-1\"><span> §</span></a></h3><p>Doubtfire is a modern, lightweight learning management system.</p><p>Central to this approach is use for frequent formative feedback to help each student develop a portfolio of work to demonstrate they have achieved unit learning outcomes. This approach aims to provide greater opportunities for students to be more goal-oriented and self-regulated.</p><p>Doubtfire, has been used by both staff and students as a platform to support such frequent formative feedback in assisting students to construct their knowledge.</p><p>Doubtfire aims to help support students set learning goals and work toward achieving these, thereby helping support the development of self-regulation. To better support these features, we have enhanced Doubtfire with open learner model visualisations to provide better support for indicating the links among these tasks and the unit’s learning outcomes as well as expected outcomes.</p><h3 id=\"what-does-it-do\">What does it do<a href=\"#what-does-it-do\" aria-hidden=\"true\" tabindex=\"-1\"><span> §</span></a></h3><p>Doubtfire allows staff and student to explore the links between tasks and learning outcomes, enabling staff to monitor student progress toward achievement of learning outcomes, and supporting students in better manage their learning progress.</p><p>It provides a platform for online learning, by giving tutors the means to allocate tasks to students and assess them, and giving students a portal to complete and submit tasks, set a grade goal, track their progress via Burndown chart, and submitting a final portfolio. The portfolio is automatically generated into pdf book form by collation of the students weekly tasks.</p><p>Teachers are allowed to give feedback to students, so that students can revise their submission and re-submit. Students can request time extensions if they are running behind schedule on a particular task.</p><p>A link to using some of the basic features for <strong>staff</strong> can be found <a href=\"/guides#staff\">here</a>.</p><p>A link to using some of the basic features for <strong>students</strong> can be found <a href=\"/guides#student\">here</a>.</p><h3 id=\"learning-and-assessment\">Learning and Assessment<a href=\"#learning-and-assessment\" aria-hidden=\"true\" tabindex=\"-1\"><span> §</span></a></h3><p>The learning outcomes guide all other activities, and are therefore defined at the start of the unit design. The aim of this process is to define what all students need to demonstrate in order to pass the unit, so these outcomes need to be clearly expressed in a language that students can engage with. Once outcomes are set, assessment criteria need to be defined to indicate how students can demonstrate these outcomes to different grade standards. Student activity is then directed by defining a range of tasks designed to help students achieve the unit learning outcomes to each of the grade standards.</p><p>The method of unit delivery is changed to be student-centered, where students can aim to achieve a given grade by working through the related tasks. During unit delivery, students work on tasks and submit this work for formative feedback with flexible deadlines to help students achieve the tasks to the required standard. In this model, staff assess student work to provide formative feedback aimed at helping the student improve their work and address any misconceptions. Where the task is of a good standard it is signed off by staff as being Complete, otherwise students are asked to fix and resubmit the work. This helps ensure that students take notice of formative feedback, and that this feedback is then acted upon to help inform student learning.</p><p>At the end of the teaching period, students use the work they have completed though the unit’s tasks to create a portfolio. Student portfolios are then assessed in order to determine final student grades. The assessment process uses the unit’s assessment criteria and unit learning outcomes to determine results. This process can then be informed by the status of each student’s tasks, with the assessor knowing that those that are marked as complete and have been assessed by staff as demonstrating the required knowledge.</p><h3 id=\"burndown-charts---an-agile-approach\">Burndown charts - An Agile approach<a href=\"#burndown-charts---an-agile-approach\" aria-hidden=\"true\" tabindex=\"-1\"><span> §</span></a></h3><p>A key principle of Agile software development methods is that they embrace change by allowing for adaptive, periodic adjustment of activities, resulting in robust and effective outcomes.</p><p>A key driver of Agile development is the use of Burn down charts—a central requirement for the Doubtfire tool.</p><p>Doubtfire allows teaching staff to outline the tasks students need to complete during the semester. Student are then able to monitor their progress against these tasks using burn down charts. The charts show the backlog of work remaining week by week, which decreases as work is completed.</p><p>These charts give students a visual way to know how many tasks they need to complete over the semester, and estimate the relative complexity of those tasks—a skill which many seem to lack. Students should also be able to use the tool to determine whether they need to increase their rate of progress (velocity) and, if so, commit more time to the subject or take greater advantage of resources available to them. In addition to the simple scrum-style marking of tasks as completed, it was also seen that students could use the system to indicate if they were working on, or having trouble with, particular tasks. To account for task heterogeneity, staff need to be able to weight tasks, based on predicted size and complexity. A students projected completion should be recalculated as tasks and weeks progress.</p><h3 id=\"who-developed-it\">Who developed it<a href=\"#who-developed-it\" aria-hidden=\"true\" tabindex=\"-1\"><span> §</span></a></h3><p>The main contributors of Doubtfire are Andrew Cain (<a href=\"https://github.com/macite\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@macite</a>), Alex Cummaudo (<a href=\"https://github.com/alexcu\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@alexcu</a>) and Jake Renzella (<a href=\"https://github.com/jakerenzella\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@jakerenzella</a>)</p><hr><h2 id=\"framework---high-level-structure\">Framework - High Level Structure<a href=\"#framework---high-level-structure\" aria-hidden=\"true\" tabindex=\"-1\"><span> §</span></a></h2><h3 id=\"doubtfire-web\">Doubtfire Web<a href=\"#doubtfire-web\" aria-hidden=\"true\" tabindex=\"-1\"><span> §</span></a></h3><p>Doubtfire Web is the front end (client side) and is written in Javascript, using <a href=\"http://angularjs.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AngularJS</a> and <a href=\"http://getbootstrap.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Bootstrap</a>.</p><h3 id=\"doubtfire-api\">Doubtfire API<a href=\"#doubtfire-api\" aria-hidden=\"true\" tabindex=\"-1\"><span> §</span></a></h3><p>Doubtfire API is the backend (server side) and uses the <a href=\"https://rubyonrails.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ruby on Rails framework</a>.</p><p><img src=\"/guides/overview/high-level-structure.gif\" alt=\"High Level Structure of Doubtfire\"></p><p>Grape API is a Restful API. Access to the API via http verbs:</p><ul><li><code>GET</code> - read data</li><li><code>PUT</code> - change data</li><li><code>POST</code> - create data</li><li><code>DELETE</code> - delete data</li></ul><p>Firstly we need to start the Rails server by navigating to the <code>doubtfire-api</code> folder and running:</p><pre><code class=\"hljs language-shell\">bundle exec rails s</code></pre><p><img src=\"/guides/overview/start-rails-server.png\" alt=\"Starting the Rails server\"></p><p>Once you have Rail server running, navigate to <code>localhost:3000/api/docs/</code>, it gives us access to the API endpoints.</p><p><img src=\"/guides/overview/api-documentation.png\" alt=\"Doubtfire API documentation\"></p><p>For example, clicking on \"users\" shows endpoints such as <code>GET /api/users</code>, <code>POST /api/users</code>, etc,</p><p><img src=\"/guides/overview/users-api.jpg\" alt=\"Users API\"></p><p>The corresponding code can be found in the <code>users_api.rb</code> file,</p><p><img src=\"/guides/overview/users-api-ruby.jpg\" alt=\"users_api.rb file\"></p><p>You can then fully interact with the API.</p><h4 id=\"getting-the-list-of-users-in-the-database\">Getting the list of users in the database<a href=\"#getting-the-list-of-users-in-the-database\" aria-hidden=\"true\" tabindex=\"-1\"><span> §</span></a></h4><p>First off, let's log in, and view the existing list of users in the database.</p><p>If we click on \"Users\" in the API documentation, it looks like this:</p><p><img src=\"/guides/overview/users-api.jpg\" alt=\"Users\"></p><p>We then want to click on <code>GET /api/users</code> (Get the list of users), which looks like this:</p><p><img src=\"/guides/overview/get-users-endpoint.png\" alt=\"Get the list of users\"></p><p>However, we need an authentication code to do this or any action, i.e. we need to be logged in as a user. To do this, click on \"auth\":</p><p><img src=\"/guides/overview/auth-api.png\" alt=\"Auth API\"></p><p>Then click on <code>POST /api/auth</code> to sign in, using:</p><pre><code>username: aadmin\npassword: password\n</code></pre><p><img src=\"/guides/overview/auth-endpoint.jpg\" alt=\"Signing in\"></p><p>Click on \"Try it out\", then scroll down and copy the <strong>auth_token</strong>:</p><p><img src=\"/guides/overview/auth-token.jpg\" alt=\"Auth token\"></p><p>We can then go back to \"Users\", and use this \"auth_token\" to get the list of users.</p><p><img src=\"/guides/overview/authenticated-api-request.jpg\" alt=\"Using auth_token to access API endpoints as a logged in user\"></p><p>Now, if we \"Try it out\", this time we will get the list of users from the database. Make sure to scroll down to see the full list.</p><p><img src=\"/guides/overview/get-users-response.jpg\" alt=\"&#x22;Getting&#x22; the list of users from the database\"></p><h4 id=\"creating-a-user\">Creating a user<a href=\"#creating-a-user\" aria-hidden=\"true\" tabindex=\"-1\"><span> §</span></a></h4><p>Next, lets say we want to create a new user into the database.</p><p>We should go to Users in the API, select <code>POST /api/users</code>, and populate the values for the new user. Also we should add the same auth_token we used when signing in, as below:</p><p><img src=\"/guides/overview/post-users-endpoint.jpg\" alt=\"Creating a new user\"></p><p>After clicking \"Try it out\", the Response Body should show the database update as below:</p><p><img src=\"/guides/overview/post-users-response.png\" alt=\"New user added\"></p><p>Finally to see the newly created user in the list of users, we can go back to \"Users\" in the API and use the function \"GET - Get the list of users\" again.</p><p>This time, if we scroll down to the body, we should see our newly created user.</p><p><img src=\"/guides/overview/post-users-response-result.jpg\" alt=\"Newly created user found at the bottom of the List of Users\"></p><p>Similarly, we can interact with different sections of the API, and get feedback from the database.</p><hr><h2 id=\"technologies-used\">Technologies Used<a href=\"#technologies-used\" aria-hidden=\"true\" tabindex=\"-1\"><span> §</span></a></h2><h3 id=\"javascript---angular-framework-front-end\">Javascript - Angular Framework (front end)<a href=\"#javascript---angular-framework-front-end\" aria-hidden=\"true\" tabindex=\"-1\"><span> §</span></a></h3><p>Angular JS is a JavaScript based Open source front end web framework, maintained by Google and by a group of individuals and corporations to address many of the challenges faced in developing a single page application with components commonly used in Internet applications. In our case it’s OnTrack. Aim of angular JS is to simplify both testing and developing by providing a framework for client side with MVC ( Model View Controller ) and MVVM ( Model View viewmodel ).</p><h4 id=\"what-does-angular-js-do\">What does angular JS DO?<a href=\"#what-does-angular-js-do\" aria-hidden=\"true\" tabindex=\"-1\"><span> §</span></a></h4><p>The AngularJS framework works by first reading the Hypertext Markup Language (HTML) page, which has an additional custom HTML attributes embedded into it. Angular interprets those attributes as directives to bind input or output parts of the page to a model that is represented by standard JavaScript variables. The values of those JavaScript variables can be manually set within the code, or retrieved from static or dynamic JSON resources.</p><h4 id=\"aim-of-angular-jss-design\">Aim of Angular JS’s design<a href=\"#aim-of-angular-jss-design\" aria-hidden=\"true\" tabindex=\"-1\"><span> §</span></a></h4><ul><li><p>to decouple DOM manipulation from application logic. The difficulty of this is dramatically affected by the way the code is structured.</p></li><li><p>to decouple the client side of an application from the server-side. This allows development work to progress in parallel and allows for reuse of both sides.</p></li><li><p>to provide structure for the journey of building an application: from designing the UI, through writing the business logic, to testing.</p></li></ul><h3 id=\"ruby-on-rails-back-end\">Ruby On Rails (back end)<a href=\"#ruby-on-rails-back-end\" aria-hidden=\"true\" tabindex=\"-1\"><span> §</span></a></h3><p>Rails is a development tool which gives web developers a framework, providing structure for all the code they write. The Rails framework helps developers to build websites and applications, because it abstracts and simplifies common repetitive tasks. Rails is written in Ruby, the programming language which is also used alongside Rails. Ruby is to Rails as PHP is to Symfony and Zend, or as Python is to Django. Ruby on Rails development is convention over configuration. This means that the programmer does not have to spend a lot of time configuring files in order to get setup, Rails comes with a set of conventions which help speed up development. <strong>Rails is the emphasis on RESTful application design.</strong> REST (Representational State Transfer) is a style of software architecture based around the client-server relationship. It encourages a logical structure within applications, which means they can easily be exposed as an API (Application Programming Interface).</p><h4 id=\"why-are-we-using-ruby-on-rails\">Why are we using Ruby On Rails?<a href=\"#why-are-we-using-ruby-on-rails\" aria-hidden=\"true\" tabindex=\"-1\"><span> §</span></a></h4><ol><li><p>The process of programming is much faster than with other frameworks and languages, partly because of the object-oriented nature of Ruby and the vast collection of open source code available within the Rails community.</p></li><li><p>The Rails conventions also make it easy for developers to move between different Rails projects, as each project will tend to follow the same structure and coding practices.</p></li><li><p>Rails is good for rapid application development (RAD), as the framework makes it easy to accommodate changes.</p></li><li><p>Ruby code is very readable and mostly self-documenting. This increases productivity, as there is less need to write out separate documentation, making it easier for other developers to pick up existing projects.</p></li><li><p>Rails has developed a strong focus on testing and has good testing frameworks.</p></li><li><p>Rails and most of its libraries are open source, so unlike other commercial development frameworks there are no licensing costs involved.</p></li></ol><h3 id=\"github\">GitHub<a href=\"#github\" aria-hidden=\"true\" tabindex=\"-1\"><span> §</span></a></h3><p>Github is a Git repository hosting service, but it adds many of its own features. While Git is a command line tool, GitHub provides a Web-based graphical interface. It also provides access control and several collaboration features, such as a wikis and basic task management tools for every project.</p><h4 id=\"how-it-works\">How it works?<a href=\"#how-it-works\" aria-hidden=\"true\" tabindex=\"-1\"><span> §</span></a></h4><p>GitHub is a code hosting platform for version control and collaboration. It lets you and others work together on projects from anywhere. You'll create your own repository and learn GitHub's Pull Request workflow, a popular way to create and review code</p><h4 id=\"what-is-a-pull-request\">What is a pull request?<a href=\"#what-is-a-pull-request\" aria-hidden=\"true\" tabindex=\"-1\"><span> §</span></a></h4><p>A pull request (PR) is a method of submitting contributions to an open development project. It occurs when a developer asks for changes committed to an external repository to be considered for inclusion in a project's main repository after the peer review.</p><h4 id=\"why-to-use-github\">Why to use Github?<a href=\"#why-to-use-github\" aria-hidden=\"true\" tabindex=\"-1\"><span> §</span></a></h4><p>It includes access controls as well as a number of collaboration features like tools for basic task management and for all projects you handle. GitHub hosts your source code projects in a variety of different programming languages and keeps track of the various changes made to every iteration.</p><h3 id=\"restful-api\">Restful API<a href=\"#restful-api\" aria-hidden=\"true\" tabindex=\"-1\"><span> §</span></a></h3><h3 id=\"mvc-model-model-view-controller\">MVC model (Model-View-Controller)<a href=\"#mvc-model-model-view-controller\" aria-hidden=\"true\" tabindex=\"-1\"><span> §</span></a></h3><p>It’s a Software design pattern Commonly used for developing user Interfaces which divides the related program logic into three interconnected elements, This is done to separate internal representations of information from the ways information is presented to and accepted from the user. This patten us used for designing the layout of the web page. Popular programing languages like Java, Python, Ruby, PHP etc have MVC frameworks used for web and mobile application development.</p><p><img src=\"/guides/overview/mvc.png\" alt=\"The MVC Model\"></p><h4 id=\"why-use-mvc-model\">Why use MVC model<a href=\"#why-use-mvc-model\" aria-hidden=\"true\" tabindex=\"-1\"><span> §</span></a></h4><ol><li><p>Multiple developers can work simultaneously on the model, controller and views.</p></li><li><p>MVC enables logical grouping of related actions on a controller together. The views for specific model are also grouped together.</p></li><li><p>The very nature of the MVC framework is such that there is low coupling among models, views or controllers</p></li><li><p>Because of the separation of responsibilities, future development or modification is easier.</p></li><li><p>Models can have multiple views</p></li></ol><h3 id=\"active-record\">Active Record<a href=\"#active-record\" aria-hidden=\"true\" tabindex=\"-1\"><span> §</span></a></h3><p>guides.rubyonrails.org -> Models -> Active Record Basics https://guides.rubyonrails.org/active_record_basics.html</p><h3 id=\"facade-design-pattern-front-end-of-doubtfire\">Facade Design pattern (front end of Doubtfire)<a href=\"#facade-design-pattern-front-end-of-doubtfire\" aria-hidden=\"true\" tabindex=\"-1\"><span> §</span></a></h3><p>The facade pattern is a software-design pattern commonly used in object-oriented programming. Analogous to a facade in architecture, a facade is an object that serves as a front-facing interface masking more complex underlying or structural code.</p><p>A facade can improve the readability and usability of a software library by masking interaction with more complex components behind a single (and often simplified) API.</p><p>In other words, <strong>a simplified API (facade) with required user functions are provided to the user.</strong> The user can then access the required functionality through the API's methods, without needing to understand the underlying complexities of the system.</p><p><img src=\"/guides/overview/facade.png\" alt=\"The Facade design pattern\"></p><h4 id=\"when-to-use-facade-pattern\">When to use Facade pattern<a href=\"#when-to-use-facade-pattern\" aria-hidden=\"true\" tabindex=\"-1\"><span> §</span></a></h4><p>Developers often use the facade design pattern when a system is very complex or difficult to understand because the system may have many interdependent classes. <strong>This pattern hides the complexities of the larger system and provides a simpler interface to the client.</strong></p><hr><h2 id=\"installing-the-development-environment\">Installing the Development Environment<a href=\"#installing-the-development-environment\" aria-hidden=\"true\" tabindex=\"-1\"><span> §</span></a></h2><hr><h2 id=\"code-exploration\">Code Exploration<a href=\"#code-exploration\" aria-hidden=\"true\" tabindex=\"-1\"><span> §</span></a></h2><h3 id=\"doubtfire-api-1\">Doubtfire-API<a href=\"#doubtfire-api-1\" aria-hidden=\"true\" tabindex=\"-1\"><span> §</span></a></h3><h4 id=\"database-and-object-model-mapping\">Database and Object model mapping<a href=\"#database-and-object-model-mapping\" aria-hidden=\"true\" tabindex=\"-1\"><span> §</span></a></h4><p>The database is found in <code>app/db/schema.rb</code>. It shows the current version of the database, which consists of the various create_table statements to create the database structure. Schema.rb tells us the different tables in the database and the values they contain.</p><p><img src=\"/guides/overview/schema-ruby.jpg\" alt=\"Schema.rb\"></p><p>Doubtfire uses the Object model, where all the objects are found in <code>app/models</code> folder. We can then map the \"projects\" table in schema.rb, to the project.rb object in the <code>app/models</code> folder. Whereas the \"projects\" table contains the definition of the attributes of the object, the project.rb object contains the functionality.</p><p><img src=\"/guides/overview/project-schema-to-object-mapping.jpg\" alt=\"Mapping of Projects Table (left) with Project Object (right)\"></p><p>Doubtfire utilizes the migrations feature of Active Record to incrementally modify the database, and then regenerate the schema definition.</p><p>To look into this further, one should look at the various tables in <strong>schema.rb</strong> and their corresponding mappings with their Object classes and class functions in the <code>app/models</code> folder.</p><h3 id=\"doubtfire-web-1\">Doubtfire-Web<a href=\"#doubtfire-web-1\" aria-hidden=\"true\" tabindex=\"-1\"><span> §</span></a></h3><hr><h2 id=\"uml-class-diagrams\">UML Class Diagrams<a href=\"#uml-class-diagrams\" aria-hidden=\"true\" tabindex=\"-1\"><span> §</span></a></h2><hr><h2 id=\"contributing\">Contributing<a href=\"#contributing\" aria-hidden=\"true\" tabindex=\"-1\"><span> §</span></a></h2><hr><h2 id=\"useful-references\">Useful References<a href=\"#useful-references\" aria-hidden=\"true\" tabindex=\"-1\"><span> §</span></a></h2><hr>","toc":[{"id":"introduction","text":"Introduction","depth":1},{"id":"what-is-doubtfire","text":"What is Doubtfire","depth":2},{"id":"what-does-it-do","text":"What does it do","depth":2},{"id":"learning-and-assessment","text":"Learning and Assessment","depth":2},{"id":"burndown-charts---an-agile-approach","text":"Burndown charts - An Agile approach","depth":2},{"id":"who-developed-it","text":"Who developed it","depth":2},{"id":"framework---high-level-structure","text":"Framework - High Level Structure","depth":1},{"id":"doubtfire-web","text":"Doubtfire Web","depth":2},{"id":"doubtfire-api","text":"Doubtfire API","depth":2},{"id":"getting-the-list-of-users-in-the-database","text":"Getting the list of users in the database","depth":3},{"id":"creating-a-user","text":"Creating a user","depth":3},{"id":"technologies-used","text":"Technologies Used","depth":1},{"id":"javascript---angular-framework-front-end","text":"Javascript - Angular Framework (front end)","depth":2},{"id":"what-does-angular-js-do","text":"What does angular JS DO?","depth":3},{"id":"aim-of-angular-jss-design","text":"Aim of Angular JS’s design","depth":3},{"id":"ruby-on-rails-back-end","text":"Ruby On Rails (back end)","depth":2},{"id":"why-are-we-using-ruby-on-rails","text":"Why are we using Ruby On Rails?","depth":3},{"id":"github","text":"GitHub","depth":2},{"id":"how-it-works","text":"How it works?","depth":3},{"id":"what-is-a-pull-request","text":"What is a pull request?","depth":3},{"id":"why-to-use-github","text":"Why to use Github?","depth":3},{"id":"restful-api","text":"Restful API","depth":2},{"id":"mvc-model-model-view-controller","text":"MVC model (Model-View-Controller)","depth":2},{"id":"why-use-mvc-model","text":"Why use MVC model","depth":3},{"id":"active-record","text":"Active Record","depth":2},{"id":"facade-design-pattern-front-end-of-doubtfire","text":"Facade Design pattern (front end of Doubtfire)","depth":2},{"id":"when-to-use-facade-pattern","text":"When to use Facade pattern","depth":3},{"id":"installing-the-development-environment","text":"Installing the Development Environment","depth":1},{"id":"code-exploration","text":"Code Exploration","depth":1},{"id":"doubtfire-api-1","text":"Doubtfire-API","depth":2},{"id":"database-and-object-model-mapping","text":"Database and Object model mapping","depth":3},{"id":"doubtfire-web-1","text":"Doubtfire-Web","depth":2},{"id":"uml-class-diagrams","text":"UML Class Diagrams","depth":1},{"id":"contributing","text":"Contributing","depth":1},{"id":"useful-references","text":"Useful References","depth":1}]},"__N_SSG":true}